package prob1;

public class StringExamples {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}
	
	public static boolean isLevel1(String password) {
		int count = 0;
		if(isLongEnough(password) && hasNoSpaces(password)) {
			if(isLowerCase(password))
				count++;
			if(isUpperCase(password))
				count++;
			if(isDigit(password))
				count++;
			if(count >= 2)
				return true;
		}
		return false;
	}
	
	public static boolean isLongEnough(String psw) {
		int count = 0;
		for(int i = 0; i < psw.length(); i++) {
			count += psw.charAt(i);
		}
		if(count >= 6)
			return true;
		return false;
	}
	
	public static boolean hasNoSpaces(String psw) {
		for(int i = 0; i < psw.length(); i++) {
			if(psw.charAt(i) == ' ')
				return false;
		}
		return true;
	}
	
	public static boolean isLowerCase(String psw) {
		int count = 0;
		for(int i = 0; i < psw.length(); i++) {
			if(Character.isLowerCase(psw.charAt(i)))
				count++;
		}
		if(count >= 1)
			return true;
		return false;
	}
	
	public static boolean isUpperCase(String psw) {
		int count = 0;
		for(int i = 0; i < psw.length(); i++) {
			if(Character.isUpperCase(psw.charAt(i)))
				count++;
		}
		if(count >= 1)
			return true;
		return false;
	}
	public static boolean isDigit(String psw) {
		int count = 0;
		for(int i = 0; i < psw.length(); i++) {
			if(Character.isDigit(psw.charAt(i)))
				count++;
		}
		if(count >= 1)
			return true;
		return false;
	}

	public static boolean isLevel2(String password) {
		int count = 0;
		if(isLongEnough(password) && hasNoSpaces(password)) {
			if(isLowerCase(password))
				count++;
			if(isUpperCase(password))
				count++;
			if(isDigit(password))
				count++;
			if(count == 3)
				return true;
		}
		return false;
	}
	
	public static String reverseWords(String wrd) {
		int pos = wrd.lastIndexOf(' ');
		String reverse = "";
		while(pos != -1) {
			reverse += wrd.substring(pos);
			wrd = wrd.substring(0, pos);
			pos = wrd.lastIndexOf(' ');
		}
		reverse += " " + wrd;
		reverse = reverse.trim();
		return reverse;
	}
	
	public static String getUniqueCharsAndDigits(String[] wrds) {
		String words = combineWords(wrds);
		String digit = "";
		String letter = "";
		int i = 0;
		
		while(i < words.length()) {
			if(Character.isDigit(words.charAt(i)))
				digit += words.charAt(i);
			else if(Character.isLetter(words.charAt(i)))
				letter += words.charAt(i);
			i++;
			
		}
		return letter + digit;
	}
	
	public static String combineWords(String[] w) {
		String combine = "";
		
		for(int i = 0; i < w.length; i++) {
			combine += w[i];
		}
		return combine;
	}
	
}